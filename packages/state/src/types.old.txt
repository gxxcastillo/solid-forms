// import { type JSX } from 'solid-js';

// // Move these types out of the state packg

// export type SelectableFieldType = 'checkbox' | 'radio' | 'select';
// export type FormErrors = Record<FieldName, ErrorMessages | undefined>;

// export type FieldBuilderProps<P, V> = FieldSetBaseProps & FieldSetInternalProps<V> & P;

// // @TODO - FieldSetProps<P, V> might end up causing a problem IF the "component" passed into this FormField does not take FieldSetProps<P, V> as props
// // in which case, I'd have to figure out some way of finding out what properties the "component" takes, and use those instead
// // for now, I hope this works...
// export type FormFieldProps<P, V> = FormFieldComponentProps<P, V> & {
//   component: JSX.Element;
// };

// export type FormFieldComponentProps<P, V> = FieldSetBaseProps &
//   FormFieldComponentBaseProps<V> &
//   Omit<P, keyof FieldSetInternalProps<V> | 'defaultValue' | 'name'>;

// export type FormFieldComponentBaseProps<V, Z = FieldValue> = {
//   value?: V;
//   defaultValue?: Z;
//   defaultChecked?: boolean;
//   isControlled?: boolean;
//   match?: FieldName;
//   validator?: CustomValidator<V>;
// };

// export interface FieldSetBaseProps {
//   name: string;
//   label?: string;
//   isLoading?: boolean;
// }

// export interface FieldSetInternalProps<V> {
//   id?: string;
//   error?: ErrorMessage;
//   errors?: ErrorMessages;
//   value?: V;
//   isInitialized?: boolean;
//   setValue?: (value?: V, initialize?: boolean) => void;
//   showIcon?: (value?: V, e?: ErrorMessages) => boolean;
//   onChange?: FieldOnChangeHandler<V>;
//   onBlur?: FieldOnBlurHandler;
//   'data-for'?: string;
//   'data-tip'?: string;
// }

// export type FormElementRef = HTMLDivElement | HTMLFormElement;

// export type FormContextProps = FormState;

// export type FieldSetter<V> = (fieldName: FieldName, fieldValue: V) => void;

// export type FormOnChangeHandler = (fieldName: FieldName, fieldValue: FieldValue) => void;

// export type FieldOnChangeHandler<T = JSX.Element> = JSX.EventHandler<T, InputEvent>;
// export type FieldOnBlurHandler<T = JSX.Element> = JSX.EventHandler<T, UIEvent>;

// export interface GraphQLFieldError {
//   message: string;
//   code: string;
// }

// export type GraphQLFieldErrors = Record<string, GraphQLFieldError[]>;

// export interface ErrorResult {
//   message: string;
//   code: string;
// }

// export type ErrorResults = ErrorResult[];
// export type FormErrorResult = Record<string, ErrorResult>;
